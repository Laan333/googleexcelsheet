import openpyxl
import datetime
import os
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%d.%m.%Y %H:%M:%S'
)
logger = logging.getLogger("excel_worker")


class ExcelSingleFileWorker:
    def __init__(self, filepath: str, date: datetime.date = None):
        self.filepath = filepath
        self.report_sheet = "Report"
        self.archive_date = date or self._get_previous_month_date()
        self.current_month_sheet = self.archive_date.strftime("%m.%Y")

        if not os.path.exists(self.filepath):
            self._create_initial_workbook()
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª –∏ –ª–∏—Å—Ç '{self.report_sheet}'")

        self.wb = openpyxl.load_workbook(self.filepath)

    def _get_previous_month_date(self) -> datetime.date:
        today = datetime.date.today()
        first_of_this_month = today.replace(day=1)
        last_month = first_of_this_month - datetime.timedelta(days=1)
        return last_month

    def _create_initial_workbook(self):
        wb = openpyxl.Workbook()
        wb.remove(wb.active)
        wb.create_sheet(self.report_sheet)
        wb.save(self.filepath)

    def _sanitize_cell(self, cell):
        """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —è—á–µ–π–∫—É, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –µ—ë –≤ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
        –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏,
        —Ç–∞–∫ –∫–∞–∫ –º—ã –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. """
        if isinstance(cell, (datetime.datetime, datetime.date)):
            return cell.strftime('%d.%m.%Y')
        elif isinstance(cell, float):  # –µ—Å–ª–∏ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            return cell
        elif isinstance(cell, int):  # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            return cell  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        elif cell is None:  # –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
            return ""
        return str(cell).strip()  # –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É

    def _create_or_replace_sheet(self, name: str):
        if name in self.wb.sheetnames:
            logger.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—à–µ–º.")
            self.wb.remove(self.wb[name])
        else:
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç '{name}'.")
        return self.wb.create_sheet(name)

    def archive_full_report(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ Report
        if self.report_sheet not in self.wb.sheetnames:
            logger.warning(f"‚ùå –õ–∏—Å—Ç '{self.report_sheet}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç Report –ø–æ –∏–º–µ–Ω–∏
        source_ws = self.wb[self.report_sheet]

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π –ª–∏—Å—Ç
        archive_ws = self._create_or_replace_sheet(self.current_month_sheet)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π –ª–∏—Å—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "Report"
        try:
            if len(self.wb.sheetnames) > 1:
                report_index = self.wb.sheetnames.index(self.report_sheet)
                archive_index = self.wb.sheetnames.index(self.current_month_sheet)

                # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞
                archive_sheet = self.wb[self.current_month_sheet]

                # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ Report
                self.wb._sheets.pop(archive_index)
                self.wb._sheets.insert(report_index + 1, archive_sheet)
                logger.info(f"‚úÖ –õ–∏—Å—Ç '{self.current_month_sheet}' –ø–µ—Ä–µ–º–µ—â—ë–Ω –ø–æ—Å–ª–µ '{self.report_sheet}'")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å –ª–∏—Å—Ç {self.current_month_sheet}: {e}")

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
        rows_copied = 0

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ
        max_row = source_ws.max_row
        max_col = source_ws.max_column

        # –ö–æ–ø–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        for col_idx in range(1, max_col + 1):
            col_letter = openpyxl.utils.get_column_letter(col_idx)
            if col_letter in source_ws.column_dimensions:
                archive_ws.column_dimensions[col_letter].width = source_ws.column_dimensions[col_letter].width

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞ Report
        headers = []
        try:
            if max_row > 0:
                first_row = next(source_ws.iter_rows(min_row=1, max_row=1))
                headers = [cell.value for cell in first_row]
        except StopIteration:
            logger.warning("‚ö†Ô∏è –õ–∏—Å—Ç Report –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.")

        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫ —Å–Ω–∞—á–∞–ª–∞
        for row_idx in range(1, max_row + 1):
            for col_idx in range(1, max_col + 1):
                # –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
                source_cell = source_ws.cell(row=row_idx, column=col_idx)
                # –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É –≤ —Ü–µ–ª–µ–≤–æ–º –ª–∏—Å—Ç–µ —Å —Ç–µ–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º
                target_cell = archive_ws.cell(row=row_idx, column=col_idx)
                # –ö–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
                target_cell.value = source_cell.value

                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞
                try:
                    target_cell.number_format = source_cell.number_format

                    # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ —è—á–µ–π–∫–∏, —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
                    if source_cell.has_style:
                        # 1. –ö–æ–ø–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç
                        if source_cell.font:
                            from openpyxl.styles import Font
                            target_cell.font = Font(
                                name=source_cell.font.name,
                                size=source_cell.font.size,
                                bold=source_cell.font.bold,
                                italic=source_cell.font.italic,
                                vertAlign=source_cell.font.vertAlign,
                                underline=source_cell.font.underline,
                                strike=source_cell.font.strike,
                                color=source_cell.font.color
                            )

                        # 2. –ö–æ–ø–∏—Ä—É–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
                        if source_cell.alignment:
                            from openpyxl.styles import Alignment
                            target_cell.alignment = Alignment(
                                horizontal=source_cell.alignment.horizontal,
                                vertical=source_cell.alignment.vertical,
                                textRotation=source_cell.alignment.textRotation,
                                wrapText=source_cell.alignment.wrapText,
                                shrinkToFit=source_cell.alignment.shrinkToFit,
                                indent=source_cell.alignment.indent
                            )

                        # 3. –ö–æ–ø–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π, –∫–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∏–ª—å –≥—Ä–∞–Ω–∏—Ü—ã)
                        if source_cell.border:
                            from openpyxl.styles import Border, Side
                            sides = {}
                            for side_name in ['left', 'right', 'top', 'bottom']:
                                source_side = getattr(source_cell.border, side_name)
                                if source_side and source_side.style:
                                    sides[side_name] = Side(style=source_side.style, color=source_side.color)
                                else:
                                    sides[side_name] = Side(style=None)

                            target_cell.border = Border(**sides)

                        # 4. –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–ª–∏–≤–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ PatternFill)
                        if source_cell.fill:
                            from openpyxl.styles import PatternFill
                            try:
                                if hasattr(source_cell.fill, 'fill_type') and source_cell.fill.fill_type:
                                    target_cell.fill = PatternFill(
                                        fill_type=source_cell.fill.fill_type,
                                        start_color=source_cell.fill.start_color,
                                        end_color=source_cell.fill.end_color
                                    )
                            except Exception:
                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ª–∏–≤–∫–∏
                                pass

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —è—á–µ–π–∫–∏ {row_idx}:{col_idx}: {e}")

            rows_copied += 1

        logger.info(f"üì• –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {rows_copied} —Å—Ç—Ä–æ–∫ –∏–∑ '{self.report_sheet}' –≤ '{self.current_month_sheet}'.")

        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ª–∏—Å—Ç Report –ø–æ –∏–º–µ–Ω–∏
        if self.report_sheet in self.wb.sheetnames:
            self.wb.remove(self.wb[self.report_sheet])
            logger.info(f"üóëÔ∏è –õ–∏—Å—Ç '{self.report_sheet}' —É–¥–∞–ª–µ–Ω.")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç Report
        new_report_ws = self.wb.create_sheet(self.report_sheet)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if headers:
            new_report_ws.append(headers)
            logger.info(f"üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –Ω–æ–≤—ã–π –ª–∏—Å—Ç '{self.report_sheet}'.")

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º Report –≤ –Ω–∞—á–∞–ª–æ –∫–Ω–∏–≥–∏
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞ Report
            new_index = self.wb.sheetnames.index(self.report_sheet)
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∂–µ —Ç–∞–º
            if new_index > 0:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞
                sheet_to_move = self.wb[self.report_sheet]
                # –£–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                self.wb._sheets.pop(new_index)
                # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
                self.wb._sheets.insert(0, sheet_to_move)
                logger.info(f"üîÑ –õ–∏—Å—Ç '{self.report_sheet}' –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –Ω–∞—á–∞–ª–æ.")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ª–∏—Å—Ç '{self.report_sheet}' –≤ –Ω–∞—á–∞–ª–æ: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self._save()

    def _save(self):
        try:
            self.wb.save(self.filepath)
            logger.info(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ '{self.filepath}'.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")