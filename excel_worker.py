import openpyxl
import datetime
import os
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%d.%m.%Y %H:%M:%S'
)
logger = logging.getLogger("excel_worker")


class ExcelSingleFileWorker:
    def __init__(self, filepath: str, date: datetime.date = None):
        self.filepath = filepath
        self.report_sheet = "Report"
        self.archive_date = date or self._get_previous_month_date()
        self.current_month_sheet = self.archive_date.strftime("%m.%Y")

        if not os.path.exists(self.filepath):
            self._create_initial_workbook()
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª –∏ –ª–∏—Å—Ç '{self.report_sheet}'")

        self.wb = openpyxl.load_workbook(self.filepath)

    def _get_previous_month_date(self) -> datetime.date:
        today = datetime.date.today()
        first_of_this_month = today.replace(day=1)
        last_month = first_of_this_month - datetime.timedelta(days=1)
        return last_month

    def _create_initial_workbook(self):
        wb = openpyxl.Workbook()
        wb.remove(wb.active)
        wb.create_sheet(self.report_sheet)
        wb.save(self.filepath)

    def _sanitize_cell(self, cell):
        """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —è—á–µ–π–∫—É, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –µ—ë –≤ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å. """
        if isinstance(cell, (datetime.datetime, datetime.date)):
            return cell.strftime('%d.%m.%Y')
        if isinstance(cell, float):  # –µ—Å–ª–∏ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
            sanitized_value = f"{cell:.6f}".replace(",", ".")
            logger.debug(f"–°–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π: {cell} -> {sanitized_value}")
            return sanitized_value  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É —Å —Ç–æ—á–∫–æ–π
        if isinstance(cell, int):  # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            logger.debug(f"–°–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: {cell}")
            return str(cell)  # –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        return cell  # –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∫–∞–∫ –µ—Å—Ç—å

    def _create_or_replace_sheet(self, name: str):
        if name in self.wb.sheetnames:
            logger.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—à–µ–º.")
            self.wb.remove(self.wb[name])
        else:
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç '{name}'.")
        return self.wb.create_sheet(name)

    def archive_full_report(self):
        if self.report_sheet not in self.wb.sheetnames:
            logger.warning(f"‚ùå –õ–∏—Å—Ç '{self.report_sheet}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        source_ws = self.wb[self.report_sheet]
        archive_ws = self._create_or_replace_sheet(self.current_month_sheet)

        # –ø–µ—Ä–µ–º–µ—Å—Ç–∏–º –∞—Ä—Ö–∏–≤–Ω—ã–π –ª–∏—Å—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "Report" (–µ—Å–ª–∏ Report –µ—Å—Ç—å)
        try:
            report_index = self.wb.sheetnames.index(self.report_sheet)
            self.wb._sheets.remove(archive_ws)
            self.wb._sheets.insert(report_index + 1, archive_ws)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å –ª–∏—Å—Ç {self.current_month_sheet}: {e}")

        rows_copied = 0
        for row in source_ws.iter_rows(values_only=True):
            sanitized = [self._sanitize_cell(cell) for cell in row]
            logger.debug(f"–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏: {row} -> {sanitized}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            archive_ws.append(sanitized)
            rows_copied += 1

        logger.info(f"üì• –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {rows_copied} —Å—Ç—Ä–æ–∫ –∏–∑ '{self.report_sheet}' –≤ '{self.current_month_sheet}'.")

        headers = [cell.value for cell in next(source_ws.iter_rows(min_row=1, max_row=1))]
        self.wb.remove(source_ws)

        new_report_ws = self.wb.create_sheet(self.report_sheet)
        new_report_ws.append(headers)

        # –ø–µ—Ä–µ–º–µ—â–∞–µ–º Report –≤ –Ω–∞—á–∞–ª–æ
        self.wb._sheets.remove(new_report_ws)
        self.wb._sheets.insert(0, new_report_ws)

        logger.info(f"üßπ –õ–∏—Å—Ç '{self.report_sheet}' –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –Ω–∞—á–∞–ª–æ.")

        self._save()

    def _save(self):
        self.wb.save(self.filepath)
        logger.info(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ '{self.filepath}'.")