import openpyxl
import datetime
import os
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%d.%m.%Y %H:%M:%S'
)
logger = logging.getLogger("excel_worker")


class ExcelSingleFileWorker:
    def __init__(self, filepath: str, date: datetime.date = None):
        self.filepath = filepath
        self.report_sheet = "Report"
        self.archive_date = date or self._get_previous_month_date()
        self.current_month_sheet = self.archive_date.strftime("%m.%Y")

        if not os.path.exists(self.filepath):
            self._create_initial_workbook()
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª –∏ –ª–∏—Å—Ç '{self.report_sheet}'")

        self.wb = openpyxl.load_workbook(self.filepath)

    def _get_previous_month_date(self) -> datetime.date:
        today = datetime.date.today()
        first_of_this_month = today.replace(day=1)
        last_month = first_of_this_month - datetime.timedelta(days=1)
        return last_month

    def _create_initial_workbook(self):
        wb = openpyxl.Workbook()
        wb.remove(wb.active)
        wb.create_sheet(self.report_sheet)
        wb.save(self.filepath)

    def _sanitize_cell(self, cell):
        """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —è—á–µ–π–∫—É, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –µ—ë –≤ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
        –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏,
        —Ç–∞–∫ –∫–∞–∫ –º—ã –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. """
        if isinstance(cell, (datetime.datetime, datetime.date)):
            return cell.strftime('%d.%m.%Y')
        elif isinstance(cell, float):  # –µ—Å–ª–∏ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            return cell
        elif isinstance(cell, int):  # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            return cell  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        elif cell is None:  # –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
            return ""
        return str(cell).strip()  # –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É

    def _create_or_replace_sheet(self, name: str):
        if name in self.wb.sheetnames:
            logger.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—à–µ–º.")
            self.wb.remove(self.wb[name])
        else:
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç '{name}'.")
        return self.wb.create_sheet(name)

    def archive_full_report(self):
        if self.report_sheet not in self.wb.sheetnames:
            logger.warning(f"‚ùå –õ–∏—Å—Ç '{self.report_sheet}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        source_ws = self.wb[self.report_sheet]
        archive_ws = self._create_or_replace_sheet(self.current_month_sheet)

        # –ø–µ—Ä–µ–º–µ—Å—Ç–∏–º –∞—Ä—Ö–∏–≤–Ω—ã–π –ª–∏—Å—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "Report" (–µ—Å–ª–∏ Report –µ—Å—Ç—å)
        try:
            report_index = self.wb.sheetnames.index(self.report_sheet)
            self.wb._sheets.remove(archive_ws)
            self.wb._sheets.insert(report_index + 1, archive_ws)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å –ª–∏—Å—Ç {self.current_month_sheet}: {e}")

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫ –Ω–∞–ø—Ä—è–º—É—é
        rows_copied = 0

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ
        max_row = source_ws.max_row
        max_col = source_ws.max_column

        for row_idx in range(1, max_row + 1):
            for col_idx in range(1, max_col + 1):
                # –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
                source_cell = source_ws.cell(row=row_idx, column=col_idx)
                # –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É –≤ —Ü–µ–ª–µ–≤–æ–º –ª–∏—Å—Ç–µ
                target_cell = archive_ws.cell(row=row_idx, column=col_idx)
                # –ö–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                target_cell.value = source_cell.value

                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç —è—á–µ–π–∫–∏ (—á–∏—Å–ª–æ, —Ç–µ–∫—Å—Ç, –¥–∞—Ç–∞ –∏ —Ç.–¥.)
                if source_cell.has_style:
                    target_cell.font = source_cell.font
                    target_cell.border = source_cell.border
                    target_cell.fill = source_cell.fill
                    target_cell.number_format = source_cell.number_format
                    target_cell.protection = source_cell.protection
                    target_cell.alignment = source_cell.alignment

            rows_copied += 1

        logger.info(f"üì• –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {rows_copied} —Å—Ç—Ä–æ–∫ –∏–∑ '{self.report_sheet}' –≤ '{self.current_month_sheet}'.")

        headers = [cell.value for cell in next(source_ws.iter_rows(min_row=1, max_row=1))]
        self.wb.remove(source_ws)

        new_report_ws = self.wb.create_sheet(self.report_sheet)
        new_report_ws.append(headers)

        # –ø–µ—Ä–µ–º–µ—â–∞–µ–º Report –≤ –Ω–∞—á–∞–ª–æ
        self.wb._sheets.remove(new_report_ws)
        self.wb._sheets.insert(0, new_report_ws)

        logger.info(f"üßπ –õ–∏—Å—Ç '{self.report_sheet}' –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –Ω–∞—á–∞–ª–æ.")

        self._save()

    def _save(self):
        self.wb.save(self.filepath)
        logger.info(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ '{self.filepath}'.")