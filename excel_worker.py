import openpyxl
import datetime
import os
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%d.%m.%Y %H:%M:%S'
)
logger = logging.getLogger("excel_worker")

class ExcelSingleFileWorker:
    def __init__(self, filepath: str):
        self.filepath = filepath
        self.report_sheet = "Report"
        self.current_month_sheet = datetime.datetime.today().strftime("%m.%Y")

        if not os.path.exists(self.filepath):
            wb = openpyxl.Workbook()
            wb.remove(wb.active)
            wb.create_sheet(self.report_sheet)
            wb.save(self.filepath)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª –∏ –ª–∏—Å—Ç '{self.report_sheet}'")

        self.wb = openpyxl.load_workbook(self.filepath)

    def _sanitize_cell(self, cell):
        if isinstance(cell, (datetime.datetime, datetime.date)):
            return cell.strftime('%d.%m.%Y')
        elif cell is None:
            return ""
        return str(cell).strip()

    def archive_full_report(self):
        if self.report_sheet not in self.wb.sheetnames:
            logger.warning(f"‚ùå –õ–∏—Å—Ç '{self.report_sheet}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        source_ws = self.wb[self.report_sheet]

        # —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        if self.current_month_sheet not in self.wb.sheetnames:
            archive_ws = self.wb.create_sheet(self.current_month_sheet)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç '{self.current_month_sheet}' –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.")
        else:
            logger.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç '{self.current_month_sheet}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—à–µ–º.")
            self.wb.remove(self.wb[self.current_month_sheet])
            archive_ws = self.wb.create_sheet(self.current_month_sheet)

        rows_copied = 0
        for row in source_ws.iter_rows(values_only=True):
            sanitized = [self._sanitize_cell(cell) for cell in row]
            archive_ws.append(sanitized)
            rows_copied += 1

        logger.info(f"üì• –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {rows_copied} —Å—Ç—Ä–æ–∫ –∏–∑ '{self.report_sheet}' –≤ '{self.current_month_sheet}'.")

        # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ª–∏—Å—Ç–∞
        headers = [cell.value for cell in next(source_ws.iter_rows(min_row=1, max_row=1))]

        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ª–∏—Å—Ç
        self.wb.remove(source_ws)

        # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∏—Å—Ç—ã–π Report
        new_ws = self.wb.create_sheet(self.report_sheet)
        new_ws.append(headers)
        logger.info(f"üßπ –õ–∏—Å—Ç '{self.report_sheet}' –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω, –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏.")

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        self.wb.save(self.filepath)
        logger.info(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ '{self.filepath}'.")
